<?php

namespace SkyBoss\entity\types;

use pocketmine\entity\Effect;
use pocketmine\entity\EffectInstance;
use pocketmine\entity\Entity;
use pocketmine\event\entity\EntityDamageByEntityEvent;
use pocketmine\event\entity\EntityDamageEvent;
use pocketmine\level\Level;
use pocketmine\nbt\tag\CompoundTag;
use pocketmine\Player;
use pocketmine\scheduler\ClosureTask;
use pocketmine\utils\TextFormat;
use SkyBoss\entity\BossEntity;
use SkyBoss\Main;

class SuperHumanEntity extends BossEntity{

    private $specialAttackCd = 60 * 60 * 5;
    /**
     * @var int|mixed
     */
    private $combos;
    /**
     * @var int|mixed|ClosureTask
     */
    private $task;

    public function __construct(Level $level, CompoundTag $nbt){
        $this->setSkin(Main::getInstance()->getSuperHumanSkin());
        parent::__construct($level, $nbt);
        $this->setMaxHealth(10000);
        $this->setHealth($this->getMaxHealth());
        $this->setScale(1.8);
    }


    public function onUpdate(int $currentTick): bool{
        $this->specialAttackCd--;
        if($this->specialAttackCd <= 0){
            $bb = $this->getBoundingBox()->expand(3, 3,3);
            foreach($this->getLevel()->getNearbyEntities($bb) as $entity){
                if($entity instanceof Player){
                    if($entity === $this){
                        continue;
                    }
                    $entity->knockBack($entity, 0, $entity->getX() - $this->getX(), $entity->getZ() - $this->getZ(), 1);
                    $entity->setHealth($entity->getHealth() - mt_rand(30,40));
                    $entity->setOnFire(20);
                }
            }
            $this->specialAttackCd = 60 * 60 * 5;
        }
        $this->addEffect(new EffectInstance(Effect::getEffect(Effect::SPEED), 30, mt_rand(4, 5)));
        return parent::onUpdate($currentTick);
    }

    public function getName(): string{
        return "SuperHumanBoss";
    }

    public function attackEntity(Entity $player){
        if($this->attackDelay > 20 && $this->distanceSquared($player) < 2){
            $chance = mt_rand(1, 7);
            if($chance === 2){
                if($player instanceof Player){
                    $this->combos[$player->getName()] = 0;
                    Main::getInstance()->getScheduler()->scheduleRepeatingTask($this->task = new ClosureTask(function()use($player): void{

                        $player->knockBack($player, 15, $player->getX() - $this->getX(), $player->getZ() - $this->getZ(), 1);
                        $this->combos[$player->getName()]++;
                        if($this->combos[$player->getName()] >= 10){
                            $this->task->getHandler()->cancel();
                            unset($this->combos[$player->getName()]);
                        }
                        $this->doHitAnimation();
                    }), 25);
                }
            }else{
                $this->attackDelay = 0;
                $damage = mt_rand(3, 8);
                $ev = new EntityDamageByEntityEvent($this, $player, EntityDamageEvent::CAUSE_ENTITY_ATTACK, $damage);
                $player->attack($ev);
                $this->doHitAnimation();
            }
        }
    }

    public function updateNametag(): void{
        $this->setNameTag("§a§lHUMAN" . TextFormat::EOL . TextFormat::RESET . TextFormat::DARK_GRAY . "[" . TextFormat::WHITE .
            $this->getHealth() . "/" . $this->getMaxHealth() . TextFormat::DARK_GRAY . "]");
        parent::updateNametag(); // TODO: Change the autogenerated stub
    }
}